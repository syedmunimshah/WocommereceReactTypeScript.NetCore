// <auto-generated />
using System;
using DbConnection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DbConnection.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241225183436_entityroles")]
    partial class entityroles
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DbConnection.Privileges", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Privileges");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(2024, 12, 25, 18, 34, 35, 936, DateTimeKind.Utc).AddTicks(448),
                            IsActive = true,
                            Slug = "user-Register",
                            Type = "Post",
                            UrlPath = "Auth/Register"
                        },
                        new
                        {
                            Id = 2,
                            CreateAt = new DateTime(2024, 12, 25, 18, 34, 35, 936, DateTimeKind.Utc).AddTicks(1346),
                            IsActive = true,
                            Slug = "user-GellAll",
                            Type = "Get",
                            UrlPath = "Auth/GellAll"
                        },
                        new
                        {
                            Id = 3,
                            CreateAt = new DateTime(2024, 12, 25, 18, 34, 35, 936, DateTimeKind.Utc).AddTicks(1349),
                            IsActive = true,
                            Slug = "user-UpdateRegister",
                            Type = "Post",
                            UrlPath = "Auth/UpdateRegister"
                        },
                        new
                        {
                            Id = 4,
                            CreateAt = new DateTime(2024, 12, 25, 18, 34, 35, 936, DateTimeKind.Utc).AddTicks(1351),
                            IsActive = true,
                            Slug = "user-FindUserById",
                            Type = "Get",
                            UrlPath = "Auth/FindUserById"
                        },
                        new
                        {
                            Id = 5,
                            CreateAt = new DateTime(2024, 12, 25, 18, 34, 35, 936, DateTimeKind.Utc).AddTicks(1352),
                            IsActive = true,
                            Slug = "user-DeleteUser",
                            Type = "Delete",
                            UrlPath = "Auth/DeleteUser"
                        },
                        new
                        {
                            Id = 6,
                            CreateAt = new DateTime(2024, 12, 25, 18, 34, 35, 936, DateTimeKind.Utc).AddTicks(1354),
                            IsActive = true,
                            Slug = "user-Login",
                            Type = "Post",
                            UrlPath = "Auth/Login"
                        },
                        new
                        {
                            Id = 7,
                            CreateAt = new DateTime(2024, 12, 25, 18, 34, 35, 936, DateTimeKind.Utc).AddTicks(1356),
                            IsActive = true,
                            Slug = "Admin",
                            Type = "Get",
                            UrlPath = "Auth/Admin"
                        },
                        new
                        {
                            Id = 8,
                            CreateAt = new DateTime(2024, 12, 25, 18, 34, 35, 936, DateTimeKind.Utc).AddTicks(1358),
                            IsActive = true,
                            Slug = "User",
                            Type = "Get",
                            UrlPath = "Auth/User"
                        },
                        new
                        {
                            Id = 9,
                            CreateAt = new DateTime(2024, 12, 25, 18, 34, 35, 936, DateTimeKind.Utc).AddTicks(1359),
                            IsActive = true,
                            Slug = "Hr",
                            Type = "Get",
                            UrlPath = "Auth/Hr"
                        },
                        new
                        {
                            Id = 10,
                            CreateAt = new DateTime(2024, 12, 25, 18, 34, 35, 936, DateTimeKind.Utc).AddTicks(1361),
                            IsActive = true,
                            Slug = "Role-AddRole",
                            Type = "Post",
                            UrlPath = "Role/AddRole"
                        },
                        new
                        {
                            Id = 11,
                            CreateAt = new DateTime(2024, 12, 25, 18, 34, 35, 936, DateTimeKind.Utc).AddTicks(1363),
                            IsActive = true,
                            Slug = "Role-GellAll",
                            Type = "Get",
                            UrlPath = "Role/GellAll"
                        },
                        new
                        {
                            Id = 12,
                            CreateAt = new DateTime(2024, 12, 25, 18, 34, 35, 936, DateTimeKind.Utc).AddTicks(1365),
                            IsActive = true,
                            Slug = "Role-UpdateRole",
                            Type = "Post",
                            UrlPath = "Role/UpdateRole"
                        },
                        new
                        {
                            Id = 13,
                            CreateAt = new DateTime(2024, 12, 25, 18, 34, 35, 936, DateTimeKind.Utc).AddTicks(1366),
                            IsActive = true,
                            Slug = "Role-FindRoleById",
                            Type = "Get",
                            UrlPath = "Role/FindRoleById"
                        },
                        new
                        {
                            Id = 14,
                            CreateAt = new DateTime(2024, 12, 25, 18, 34, 35, 936, DateTimeKind.Utc).AddTicks(1368),
                            IsActive = true,
                            Slug = "Role-Delete",
                            Type = "Delete",
                            UrlPath = "Role/Delete"
                        });
                });

            modelBuilder.Entity("DbConnection.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DbConnection.RolePrivileges", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PrivilegesId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("RolePrivileges");
                });

            modelBuilder.Entity("DbConnection.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PrivilegesRolePrivileges", b =>
                {
                    b.Property<int>("PrivilegesId")
                        .HasColumnType("int");

                    b.Property<int>("RolePrivilegesId")
                        .HasColumnType("int");

                    b.HasKey("PrivilegesId", "RolePrivilegesId");

                    b.HasIndex("RolePrivilegesId");

                    b.ToTable("PrivilegesRolePrivileges");
                });

            modelBuilder.Entity("RoleRolePrivileges", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("RolePrivilegesId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "RolePrivilegesId");

                    b.HasIndex("RolePrivilegesId");

                    b.ToTable("RoleRolePrivileges");
                });

            modelBuilder.Entity("DbConnection.User", b =>
                {
                    b.HasOne("DbConnection.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PrivilegesRolePrivileges", b =>
                {
                    b.HasOne("DbConnection.Privileges", null)
                        .WithMany()
                        .HasForeignKey("PrivilegesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbConnection.RolePrivileges", null)
                        .WithMany()
                        .HasForeignKey("RolePrivilegesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleRolePrivileges", b =>
                {
                    b.HasOne("DbConnection.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbConnection.RolePrivileges", null)
                        .WithMany()
                        .HasForeignKey("RolePrivilegesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DbConnection.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
